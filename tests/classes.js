// Generated by CoffeeScript 1.7.1

/*
  delais.coffee pour School Phenomenon
  @author: Ophir LOJKINE
  Gestion des d√©lais en fonction des types de commande
 */
var ArbreApprox, ArbreDelais, ArbrePrix, ArbreValeurs, EventEmitter, InputWatcher, mixIn,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

mixIn = function() {
  var classes;
  classes = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  return classes.reduce((function(o, n) {
    var key, method, _ref;
    _ref = n.prototype;
    for (key in _ref) {
      method = _ref[key];
      o.prototype[key] = method;
    }
    return o;
  }), ((function() {
    function _Class() {}

    return _Class;

  })()));
};

EventEmitter = (function() {
  function EventEmitter() {
    this.listeners = {};
  }

  EventEmitter.prototype.on = function(ev, fun) {
    this.listeners[ev] = this.listeners[ev] || [];
    this.listeners[ev].push(fun);
    return this;
  };

  EventEmitter.prototype.emit = function() {
    var args, ev, fun, _i, _len, _ref;
    ev = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    _ref = this.listeners[ev] || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      fun = _ref[_i];
      fun.apply(this, args);
    }
    return this;
  };

  return EventEmitter;

})();

InputWatcher = (function(_super) {
  __extends(InputWatcher, _super);

  function InputWatcher(inputElm) {
    this.$input = $(inputElm);
    this.$input.on("change blur focus mouseup keyup", function() {
      return this.emit('change', this.$input.val());
    });
  }

  return InputWatcher;

})(EventEmitter);

ArbreValeurs = (function(_super) {
  __extends(ArbreValeurs, _super);

  ArbreValeurs.prototype.defaultVal = 0;

  function ArbreValeurs(val) {
    ArbreValeurs.__super__.constructor.apply(this, arguments);
    this.setVal(val != null ? val : this.defaultVal);
    this.val_enfants = this.defaultVal;
    this.enfants = [];
  }

  ArbreValeurs.prototype._maj = function() {
    return this.emit('maj');
  };

  ArbreValeurs.prototype._maj_enfants = function() {
    return this._setValEnfants(this.enfants.reduce(((function(_this) {
      return function(p, c) {
        return _this.valReducer(p, c.getTotal());
      };
    })(this)), this.defaultVal));
  };

  ArbreValeurs.prototype._setValEnfants = function(val) {
    this.val_enfants = val;
    return this._maj();
  };

  ArbreValeurs.prototype.setVal = function(val) {
    this.val_propre = val;
    return this._maj();
  };

  ArbreValeurs.prototype.getTotal = function() {
    return this.valReducer(this.val_enfants, this.val_propre);
  };

  ArbreValeurs.prototype.ajout_enfants = function(enfants) {
    var enfant, _i, _len;
    this.enfants.push.apply(this.enfants, enfants);
    for (_i = 0, _len = enfants.length; _i < _len; _i++) {
      enfant = enfants[_i];
      enfant.on('maj', (function(_this) {
        return function() {
          return _this._maj_enfants();
        };
      })(this));
    }
    return this._maj_enfants();
  };

  ArbreValeurs.prototype.ajout_enfant = function(enfant) {
    return this.ajout_enfants([enfant]);
  };

  return ArbreValeurs;

})(EventEmitter);

ArbrePrix = (function(_super) {
  __extends(ArbrePrix, _super);

  ArbrePrix.prototype.defaultVal = 0;

  function ArbrePrix() {
    ArbrePrix.__super__.constructor.apply(this, arguments);
    this.nbr = 0;
  }

  ArbrePrix.prototype.setNbr = function(nbr) {
    return this.nbr = parseInt(nbr);
  };

  ArbrePrix.prototype.setVal = function(prix) {
    return ArbrePrix.__super__.setVal.call(this, parseFloat(prix));
  };

  ArbrePrix.prototype.valReducer = function(prev, cur) {
    return prev + cur;
  };

  ArbrePrix.prototype.getTotal = function() {
    return this.nbr * (this.val_enfants + this.val_propre);
  };

  return ArbrePrix;

})(ArbreValeurs);

ArbreApprox = (function(_super) {
  __extends(ArbreApprox, _super);

  function ArbreApprox() {
    return ArbreApprox.__super__.constructor.apply(this, arguments);
  }

  ArbreApprox.prototype.defaultVal = false;

  ArbreApprox.prototype.setVal = function(approx) {
    return ArbreApprox.__super__.setVal.call(this, !!approx);
  };

  ArbreApprox.prototype.valReducer = function(prev, cur) {
    return prev || cur;
  };

  return ArbreApprox;

})(ArbreValeurs);

ArbreDelais = (function(_super) {
  __extends(ArbreDelais, _super);

  function ArbreDelais() {
    return ArbreDelais.__super__.constructor.apply(this, arguments);
  }

  ArbreDelais.prototype.defaultVal = -Infinity;

  ArbreDelais.prototype.setVal = function(delais) {
    return ArbreDelais.__super__.setVal.call(this, parseInt(delais));
  };

  ArbreDelais.prototype.valReducer = Math.max;

  return ArbreDelais;

})(ArbreValeurs);

if ((typeof module !== "undefined" && module !== null) && (module.exports != null)) {
  module.exports = {
    ArbreDelais: ArbreDelais,
    ArbrePrix: ArbrePrix
  };
}
